nimTitle	application	application.html	module src/prologue/core/application		0
nim	registerErrorHandler	application.html#registerErrorHandler,Prologue,HttpCode,ErrorHandler	proc registerErrorHandler(app: Prologue; code: HttpCode; handler: ErrorHandler)		69
nim	registerErrorHandler	application.html#registerErrorHandler,Prologue,set[HttpCode],ErrorHandler	proc registerErrorHandler(app: Prologue; code: set[HttpCode]; handler: ErrorHandler)		78
nim	registerErrorHandler	application.html#registerErrorHandler,Prologue,openArray[HttpCode],ErrorHandler	proc registerErrorHandler(app: Prologue; code: openArray[HttpCode];\n                     handler: ErrorHandler)		84
nim	addRoute	application.html#addRoute,Prologue,Regex,HandlerAsync,openArray[HandlerAsync]	proc addRoute(app: Prologue; route: Regex; handler: HandlerAsync;\n         httpMethod = HttpGet; middlewares: openArray[HandlerAsync] = @[])		113
nim	addRoute	application.html#addRoute,Prologue,Regex,HandlerAsync,openArray[HttpMethod],openArray[HandlerAsync]	proc addRoute(app: Prologue; route: Regex; handler: HandlerAsync;\n         httpMethod: openArray[HttpMethod];\n         middlewares: openArray[HandlerAsync] = @[])		129
nim	addRoute	application.html#addRoute,Prologue,string,HandlerAsync,string,openArray[HandlerAsync]	proc addRoute(app: Prologue; route: string; handler: HandlerAsync;\n         httpMethod = HttpGet; name = "";\n         middlewares: openArray[HandlerAsync] = @[])		166
nim	addRoute	application.html#addRoute,Prologue,string,HandlerAsync,openArray[HttpMethod],string,openArray[HandlerAsync]	proc addRoute(app: Prologue; route: string; handler: HandlerAsync;\n         httpMethod: openArray[HttpMethod]; name = "";\n         middlewares: openArray[HandlerAsync] = @[])		186
nim	addRoute	application.html#addRoute,Prologue,openArray[UrlPattern],string,Option[seq[HandlerAsync]]	proc addRoute(app: Prologue; patterns: openArray[UrlPattern]; baseRoute = "";\n         middlewares: Option[seq[HandlerAsync]] = none(seq[HandlerAsync]))		195
nim	head	application.html#head,Prologue,string,HandlerAsync,string,openArray[HandlerAsync]	proc head(app: Prologue; route: string; handler: HandlerAsync; name = "";\n     middlewares: openArray[HandlerAsync] = @[])		210
nim	get	application.html#get,Prologue,string,HandlerAsync,string,openArray[HandlerAsync]	proc get(app: Prologue; route: string; handler: HandlerAsync; name = "";\n    middlewares: openArray[HandlerAsync] = @[])		215
nim	post	application.html#post,Prologue,string,HandlerAsync,string,openArray[HandlerAsync]	proc post(app: Prologue; route: string; handler: HandlerAsync; name = "";\n     middlewares: openArray[HandlerAsync] = @[])		220
nim	put	application.html#put,Prologue,string,HandlerAsync,string,openArray[HandlerAsync]	proc put(app: Prologue; route: string; handler: HandlerAsync; name = "";\n    middlewares: openArray[HandlerAsync] = @[])		225
nim	delete	application.html#delete,Prologue,string,HandlerAsync,string,openArray[HandlerAsync]	proc delete(app: Prologue; route: string; handler: HandlerAsync; name = "";\n       middlewares: openArray[HandlerAsync] = @[])		230
nim	trace	application.html#trace,Prologue,string,HandlerAsync,string,openArray[HandlerAsync]	proc trace(app: Prologue; route: string; handler: HandlerAsync; name = "";\n      middlewares: openArray[HandlerAsync] = @[])		235
nim	options	application.html#options,Prologue,string,HandlerAsync,string,openArray[HandlerAsync]	proc options(app: Prologue; route: string; handler: HandlerAsync; name = "";\n        middlewares: openArray[HandlerAsync] = @[])		240
nim	connect	application.html#connect,Prologue,string,HandlerAsync,string,openArray[HandlerAsync]	proc connect(app: Prologue; route: string; handler: HandlerAsync; name = "";\n        middlewares: openArray[HandlerAsync] = @[])		245
nim	patch	application.html#patch,Prologue,string,HandlerAsync,string,openArray[HandlerAsync]	proc patch(app: Prologue; route: string; handler: HandlerAsync; name = "";\n      middlewares: openArray[HandlerAsync] = @[])		250
nim	all	application.html#all,Prologue,string,HandlerAsync,string,openArray[HandlerAsync]	proc all(app: Prologue; route: string; handler: HandlerAsync; name = "";\n    middlewares: openArray[HandlerAsync] = @[])		255
nim	addGroup	application.html#addGroup,Group,string,HandlerAsync,string,openArray[HandlerAsync]	proc addGroup(group: Group; route: string; handler: HandlerAsync;\n         httpMethod = HttpGet; name = "";\n         middlewares: openArray[HandlerAsync] = @[])		263
nim	addGroup	application.html#addGroup,Group,string,HandlerAsync,openArray[HttpMethod],string,openArray[HandlerAsync]	proc addGroup(group: Group; route: string; handler: HandlerAsync;\n         httpMethod: openArray[HttpMethod]; name = "";\n         middlewares: openArray[HandlerAsync] = @[])		273
nim	addGroup	application.html#addGroup,Prologue,openArray[]	proc addGroup(app: Prologue; patterns: openArray[(Group, seq[UrlPattern])])		281
nim	head	application.html#head,Group,string,HandlerAsync,string,openArray[HandlerAsync]	proc head(group: Group; route: string; handler: HandlerAsync; name = "";\n     middlewares: openArray[HandlerAsync] = @[])		289
nim	get	application.html#get,Group,string,HandlerAsync,string,openArray[HandlerAsync]	proc get(group: Group; route: string; handler: HandlerAsync; name = "";\n    middlewares: openArray[HandlerAsync] = @[])		295
nim	post	application.html#post,Group,string,HandlerAsync,string,openArray[HandlerAsync]	proc post(group: Group; route: string; handler: HandlerAsync; name = "";\n     middlewares: openArray[HandlerAsync] = @[])		301
nim	put	application.html#put,Group,string,HandlerAsync,string,openArray[HandlerAsync]	proc put(group: Group; route: string; handler: HandlerAsync; name = "";\n    middlewares: openArray[HandlerAsync] = @[])		307
nim	delete	application.html#delete,Group,string,HandlerAsync,string,openArray[HandlerAsync]	proc delete(group: Group; route: string; handler: HandlerAsync; name = "";\n       middlewares: openArray[HandlerAsync] = @[])		313
nim	trace	application.html#trace,Group,string,HandlerAsync,string,openArray[HandlerAsync]	proc trace(group: Group; route: string; handler: HandlerAsync; name = "";\n      middlewares: openArray[HandlerAsync] = @[])		319
nim	options	application.html#options,Group,string,HandlerAsync,string,openArray[HandlerAsync]	proc options(group: Group; route: string; handler: HandlerAsync; name = "";\n        middlewares: openArray[HandlerAsync] = @[])		325
nim	connect	application.html#connect,Group,string,HandlerAsync,string,openArray[HandlerAsync]	proc connect(group: Group; route: string; handler: HandlerAsync; name = "";\n        middlewares: openArray[HandlerAsync] = @[])		331
nim	patch	application.html#patch,Group,string,HandlerAsync,string,openArray[HandlerAsync]	proc patch(group: Group; route: string; handler: HandlerAsync; name = "";\n      middlewares: openArray[HandlerAsync] = @[])		337
nim	all	application.html#all,Group,string,HandlerAsync,string,openArray[HandlerAsync]	proc all(group: Group; route: string; handler: HandlerAsync; name = "";\n    middlewares: openArray[HandlerAsync] = @[])		343
nim	use	application.html#use,Prologue,varargs[HandlerAsync]	proc use(app: var Prologue; middlewares: varargs[HandlerAsync])		363
nim	newApp	application.html#newApp,Settings,openArray[HandlerAsync],openArray[Event],openArray[Event]	proc newApp(settings: Settings = newSettings();\n       middlewares: openArray[HandlerAsync] = @[];\n       startup: openArray[Event] = @[]; shutdown: openArray[Event] = @[];\n    errorHandlerTable = newErrorHandlerTable(\n    [(Http404, default404Handler), (Http500, default500Handler)]);\n       appData = newStringTable(mode = modeCaseSensitive)): Prologue		366
nim	newAppQueryEnv	application.html#newAppQueryEnv,ConfigFileExt,proc(string),openArray[HandlerAsync],openArray[Event],openArray[Event]	proc newAppQueryEnv(configFileExt: ConfigFileExt;\n               loadJsonNode: proc (configPath: string): JsonNode;\n               middlewares: openArray[HandlerAsync] = @[];\n               startup: openArray[Event] = @[];\n               shutdown: openArray[Event] = @[]; errorHandlerTable = newErrorHandlerTable(\n    [(Http404, default404Handler), (Http500, default500Handler)]);\n               appData = newStringTable(mode = modeCaseSensitive)): Prologue		391
nim	newAppQueryEnv	application.html#newAppQueryEnv,openArray[HandlerAsync],openArray[Event],openArray[Event]	proc newAppQueryEnv(middlewares: openArray[HandlerAsync] = @[];\n               startup: openArray[Event] = @[];\n               shutdown: openArray[Event] = @[]; errorHandlerTable = newErrorHandlerTable(\n    [(Http404, default404Handler), (Http500, default500Handler)]);\n               appData = newStringTable(mode = modeCaseSensitive)): Prologue		424
nim	handleContext	application.html#handleContext,Prologue,Context	proc handleContext(app: Prologue; ctx: Context): owned(Future[void])		453
nim	handleRequest	application.html#handleRequest,Prologue,Request,typedesc[Context]	proc handleRequest(app: Prologue; nativeRequest: NativeRequest;\n              ctxTyp: typedesc[Context]): Future[void]		493
nim	run	application.html#run,Prologue,typedesc[Context]	proc run(app: Prologue; ctxTyp: typedesc[Context])		530
nim	run	application.html#run,Prologue	proc run(app: Prologue)		540
nim	runAsync	application.html#runAsync,Prologue,typedesc[Context]	proc runAsync(app: Prologue; ctxTyp: typedesc[Context]): owned(Future[void])		543
nim	runAsync	application.html#runAsync,Prologue	proc runAsync(app: Prologue): owned(Future[void])		553
nimgrp	put	application.html#put-procs-all	proc		225
nimgrp	run	application.html#run-procs-all	proc		530
nimgrp	head	application.html#head-procs-all	proc		210
nimgrp	all	application.html#all-procs-all	proc		255
nimgrp	newappqueryenv	application.html#newAppQueryEnv-procs-all	proc		391
nimgrp	addroute	application.html#addRoute-procs-all	proc		113
nimgrp	post	application.html#post-procs-all	proc		220
nimgrp	options	application.html#options-procs-all	proc		240
nimgrp	get	application.html#get-procs-all	proc		215
nimgrp	registererrorhandler	application.html#registerErrorHandler-procs-all	proc		69
nimgrp	patch	application.html#patch-procs-all	proc		250
nimgrp	connect	application.html#connect-procs-all	proc		245
nimgrp	delete	application.html#delete-procs-all	proc		230
nimgrp	runasync	application.html#runAsync-procs-all	proc		543
nimgrp	trace	application.html#trace-procs-all	proc		235
nimgrp	addgroup	application.html#addGroup-procs-all	proc		263
